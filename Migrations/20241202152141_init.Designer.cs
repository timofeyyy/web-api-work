// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using app.Context;

#nullable disable

namespace app.Migrations
{
    [DbContext(typeof(DataBase))]
    [Migration("20241202152141_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("app.Entities.Capacitors", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double?>("AcceptableCapacityIncrease")
                        .HasColumnType("float");

                    b.Property<double?>("AcceptableСapacityReduction")
                        .HasColumnType("float");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("DocID")
                        .HasColumnType("bigint");

                    b.Property<int?>("Kind_ID")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerName_ID")
                        .HasColumnType("int");

                    b.Property<double?>("MaxCapacity")
                        .HasColumnType("float");

                    b.Property<double?>("MaxOperatingTemperature")
                        .HasColumnType("float");

                    b.Property<double?>("MaxVoltage")
                        .HasColumnType("float");

                    b.Property<double?>("MinCapacity")
                        .HasColumnType("float");

                    b.Property<double?>("MinOperatingTemperature")
                        .HasColumnType("float");

                    b.Property<double?>("MinVoltage")
                        .HasColumnType("float");

                    b.Property<string>("OutputType")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QualicationSG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QualicationЕС")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Kind_ID");

                    b.HasIndex("ManufacturerName_ID");

                    b.HasIndex("Type_ID");

                    b.ToTable("Capacitors");
                });

            modelBuilder.Entity("app.Entities.ComponentKinds", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("EnComponentKind")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RuComponentKind")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.ToTable("ComponentKinds");
                });

            modelBuilder.Entity("app.Entities.ComponentTypes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("EnComponentType")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RuComponentType")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.ToTable("ComponentTypes");
                });

            modelBuilder.Entity("app.Entities.Diods", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("DocID")
                        .HasColumnType("bigint");

                    b.Property<int?>("Kind_ID")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerName_ID")
                        .HasColumnType("int");

                    b.Property<double?>("MaxOperatingTemperature")
                        .HasColumnType("float");

                    b.Property<double?>("MaxPermissibleAverageDirectCurrent")
                        .HasColumnType("float");

                    b.Property<double?>("MaxPermissibleDCVoltage")
                        .HasColumnType("float");

                    b.Property<double?>("MaxiPermissibleDirectCurrent")
                        .HasColumnType("float");

                    b.Property<double?>("MinOperatingTemperature")
                        .HasColumnType("float");

                    b.Property<string>("Package")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QualicationSG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QualicationЕС")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("RadiationResistance")
                        .HasColumnType("float");

                    b.Property<string>("RadiationResistanceI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Kind_ID");

                    b.HasIndex("ManufacturerName_ID");

                    b.HasIndex("Type_ID");

                    b.ToTable("Diods");
                });

            modelBuilder.Entity("app.Entities.Manufacturers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("app.Entities.Microchips", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BitDepthValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("ConsumptionCurrent")
                        .HasColumnType("float");

                    b.Property<long?>("DocID")
                        .HasColumnType("bigint");

                    b.Property<double?>("Frequency")
                        .HasColumnType("float");

                    b.Property<string>("Interfaces")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kind_ID")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturerName_ID")
                        .HasColumnType("int");

                    b.Property<double>("MaxOperatingTemperature")
                        .HasColumnType("float");

                    b.Property<double>("MaxVoltage")
                        .HasColumnType("float");

                    b.Property<string>("MemoryFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MinOperatingTemperature")
                        .HasColumnType("float");

                    b.Property<double>("MinVoltage")
                        .HasColumnType("float");

                    b.Property<string>("Qualication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("RadiationResistance")
                        .HasColumnType("float");

                    b.Property<string>("RadiationResistanceI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("SamplingTime")
                        .HasColumnType("float");

                    b.Property<int>("TechnologyName_ID")
                        .HasColumnType("int");

                    b.Property<int>("Type_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Kind_ID");

                    b.HasIndex("ManufacturerName_ID");

                    b.HasIndex("TechnologyName_ID");

                    b.HasIndex("Type_ID");

                    b.ToTable("Microchips");
                });

            modelBuilder.Entity("app.Entities.Resistors", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("CurrentLimit")
                        .HasColumnType("float");

                    b.Property<long?>("DocID")
                        .HasColumnType("bigint");

                    b.Property<int?>("Kind_ID")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerName_ID")
                        .HasColumnType("int");

                    b.Property<double?>("MaxOperatingTemperature")
                        .HasColumnType("float");

                    b.Property<double?>("MaxRatedResistance")
                        .HasColumnType("float");

                    b.Property<double?>("MaxVoltage")
                        .HasColumnType("float");

                    b.Property<double?>("MinOperatingTemperature")
                        .HasColumnType("float");

                    b.Property<double?>("MinRatedResistance")
                        .HasColumnType("float");

                    b.Property<double?>("MinVoltage")
                        .HasColumnType("float");

                    b.Property<string>("Package")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("PowerRating")
                        .HasColumnType("float");

                    b.Property<string>("QualicationSG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QualicationЕС")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ResistanceTolerance")
                        .HasColumnType("float");

                    b.Property<int?>("Type_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Kind_ID");

                    b.HasIndex("ManufacturerName_ID");

                    b.HasIndex("Type_ID");

                    b.ToTable("Resistors");
                });

            modelBuilder.Entity("app.Entities.Technologies", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("EnTechnologyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuTechnologyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Technologies");
                });

            modelBuilder.Entity("app.Entities.Transistors", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComponentName")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("DocID")
                        .HasColumnType("bigint");

                    b.Property<int?>("Kind_ID")
                        .HasColumnType("int");

                    b.Property<int?>("ManufacturerName_ID")
                        .HasColumnType("int");

                    b.Property<double?>("MaxOperatingTemperature")
                        .HasColumnType("float");

                    b.Property<double?>("MaxPermissibleDCCollectorCurrent")
                        .HasColumnType("float");

                    b.Property<double?>("MaxPermissibleDCVoltage")
                        .HasColumnType("float");

                    b.Property<double?>("MinOperatingTemperature")
                        .HasColumnType("float");

                    b.Property<string>("Package")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QualicationSG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QualicationЕС")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("RadiationResistance")
                        .HasColumnType("float");

                    b.Property<string>("RadiationResistanceI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Type_ID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Kind_ID");

                    b.HasIndex("ManufacturerName_ID");

                    b.HasIndex("Type_ID");

                    b.ToTable("Transistors");
                });

            modelBuilder.Entity("app.Entities.Capacitors", b =>
                {
                    b.HasOne("app.Entities.ComponentKinds", "Kind_")
                        .WithMany("Capacitors")
                        .HasForeignKey("Kind_ID");

                    b.HasOne("app.Entities.Manufacturers", "ManufacturerName_")
                        .WithMany("Capacitors")
                        .HasForeignKey("ManufacturerName_ID");

                    b.HasOne("app.Entities.ComponentTypes", "Type_")
                        .WithMany("Capacitors")
                        .HasForeignKey("Type_ID");

                    b.Navigation("Kind_");

                    b.Navigation("ManufacturerName_");

                    b.Navigation("Type_");
                });

            modelBuilder.Entity("app.Entities.Diods", b =>
                {
                    b.HasOne("app.Entities.ComponentKinds", "Kind_")
                        .WithMany()
                        .HasForeignKey("Kind_ID");

                    b.HasOne("app.Entities.Manufacturers", "ManufacturerName_")
                        .WithMany("Diods")
                        .HasForeignKey("ManufacturerName_ID");

                    b.HasOne("app.Entities.ComponentTypes", "Type_")
                        .WithMany()
                        .HasForeignKey("Type_ID");

                    b.Navigation("Kind_");

                    b.Navigation("ManufacturerName_");

                    b.Navigation("Type_");
                });

            modelBuilder.Entity("app.Entities.Microchips", b =>
                {
                    b.HasOne("app.Entities.ComponentKinds", "Kind_")
                        .WithMany()
                        .HasForeignKey("Kind_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Entities.Manufacturers", "ManufacturerName_")
                        .WithMany("Microchips")
                        .HasForeignKey("ManufacturerName_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Entities.Technologies", "TechnologyName_")
                        .WithMany()
                        .HasForeignKey("TechnologyName_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Entities.ComponentTypes", "Type_")
                        .WithMany()
                        .HasForeignKey("Type_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kind_");

                    b.Navigation("ManufacturerName_");

                    b.Navigation("TechnologyName_");

                    b.Navigation("Type_");
                });

            modelBuilder.Entity("app.Entities.Resistors", b =>
                {
                    b.HasOne("app.Entities.ComponentKinds", "Kind_")
                        .WithMany()
                        .HasForeignKey("Kind_ID");

                    b.HasOne("app.Entities.Manufacturers", "ManufacturerName_")
                        .WithMany("Resistors")
                        .HasForeignKey("ManufacturerName_ID");

                    b.HasOne("app.Entities.ComponentTypes", "Type_")
                        .WithMany()
                        .HasForeignKey("Type_ID");

                    b.Navigation("Kind_");

                    b.Navigation("ManufacturerName_");

                    b.Navigation("Type_");
                });

            modelBuilder.Entity("app.Entities.Transistors", b =>
                {
                    b.HasOne("app.Entities.ComponentKinds", "Kind_")
                        .WithMany()
                        .HasForeignKey("Kind_ID");

                    b.HasOne("app.Entities.Manufacturers", "ManufacturerName_")
                        .WithMany("Transistors")
                        .HasForeignKey("ManufacturerName_ID");

                    b.HasOne("app.Entities.ComponentTypes", "Type_")
                        .WithMany()
                        .HasForeignKey("Type_ID");

                    b.Navigation("Kind_");

                    b.Navigation("ManufacturerName_");

                    b.Navigation("Type_");
                });

            modelBuilder.Entity("app.Entities.ComponentKinds", b =>
                {
                    b.Navigation("Capacitors");
                });

            modelBuilder.Entity("app.Entities.ComponentTypes", b =>
                {
                    b.Navigation("Capacitors");
                });

            modelBuilder.Entity("app.Entities.Manufacturers", b =>
                {
                    b.Navigation("Capacitors");

                    b.Navigation("Diods");

                    b.Navigation("Microchips");

                    b.Navigation("Resistors");

                    b.Navigation("Transistors");
                });
#pragma warning restore 612, 618
        }
    }
}
